// 本作业需要安装新版 gualang-2.5.9 编译器
// 请用下面的链接中的方法来安装配置 2.5.9 版本的编译器
// https://github.com/kuaibiancheng/ProjectOpenCourse/wiki


// 例子 1
// 求数组的和
const sum = function(array) {
    // 先设置一个变量 s 用来存数组的和
    var s = 0
    var i = 0
    while (i < array.length()) {
        var n = array[i]
        s = s + n
        i = i + 1
    }
    return s
}


// 作业 1
// 参数是一个只包含数字的 array
// 求 array 的乘积
// 函数定义如下

// 提示：
//     通过遍历数组，然后累乘的方式计算数组的乘积，参考例子 1
//
// 分步提示：
//     1. 先设置一个变量 s 用来存数组的乘积，初始值为 1
//     2. 遍历数组，用变量 n 保存元素的值
//     3. 累乘每次的变量 n 到变量 s
//     4. 循环结束后，变量 s 里面存的是数组中所有元素的乘积
//     5. 返回变量 s（很重要，一定要 return s）

const product = function(array) {
}




// 作业 2
// 返回一个数字的绝对值
// 函数定义如下
//
// 参考上课求绝对值的代码来实现
// 1. 如果 n < 0，就把 n 的值赋值成 -n
// 2. 返回 n 的值（很重要，一定要 return n）
const abs = function(n) {

}




// 作业 3
// 参数是一个只包含数字的 array
// 求 array 中所有数字的平均数
//
// 函数定义如下
// 求数组的平均数就是先求出数组中元素的总和，然后除以数组的长度（即元素的个数）
// 1. 使用例子 1 中的 sum 函数来计算数组中所有元素的总和
// 2. 使用 len 函数计算出数组中元素的个数
// 3. 使用数组中元素的总和除以数组中元素的个数，得到平均数
// 4. 返回平均数
const average = function(array) {

}




// 作业 4
// 参数是一个只包含数字的 array
// 求 array 中最小的数字
//
// 先选数组中的第一个元素作为 s 的初始值
// 然后遍历数组，将每一个元素都与初始值比较
// 如果元素的值比初始值小，就把那个元素设置为 s 的值
// 最后返回 s 的值
// 1. 将数组中第一个元素的值赋值给 s 作为初始值
// 2. 遍历数组，用变量 n 保存元素的值
// 3. 比较 n 与 s 的值，如果 n < s，就把 n 的值赋值给 s
// 4. 循环结束后，变量 s 里面存的是数组中最小的数字
// 5. 返回变量 s（很重要，一定要 return s）
const min = function(array) {

}





// 作业 5
// 参数是一个数字 n
// 返回以下序列的结果
// 1 - 2 + 3 - 4 + 5 ... n

// 首先可以把序列看成是一个数组，这样就可以循环 n 次。
// 观察序列可以发现一个规律：奇数的时候是加，偶数的时候是减
//
// 1. 先设置一个变量 s 用来存序列的和，初始值为 0
// 2. 循环 n 次，从 1 开始，到 n + 1 结束，即包括 n 但是不包括 n + 1
// 3. 判断每次循环的值。如果是奇数，累加这个数到 s 上，如果是偶数，累减这个数到 s 上
// 4. 循环结束后，变量 s 里面存的是序列的和
// 5. 返回变量 s（很重要，一定要 return s）
const sum1 = function(n) {

}



// 作业 6
// 参数是一个数字 n
// 返回以下序列的结果
// 1 + 2 - 3 + 4 - ... n
// 还是把序列看成是一个数组，不过从第二个元素（也就是 2 开始遍历）这样就可以循环 n - 1 次
//
// 1. 先设置一个变量 s 用来存序列的和，初始值为 1，这样就可以从 2 开始计算循环了
// 2. 循环 n - 1 次，从 2 开始，到 n 结束（包括 n）
// 3. 判断每次循环的值。
//    如果是第一个数字（这里是从 2 开始的），观察式子的规律，从 2 开始之后，当一个数字是奇数时，就是减去这个数（比如说 3 5 7 9...）。
//    当一个数字是偶数时，就是加上这个数（比如 2 4 6 8...）。
// 4. 循环结束后，变量 s 里面存的是序列的和
// 5. 返回变量 s（很重要，一定要 return s）

const sum2 = function(n) {

}



// 作业 7
//
// 实现 fac 函数
// 接受一个参数 n
// 返回 n 的阶乘, 1 * 2 * 3 * ... * n
// 计算从 1 到 n 的阶乘，重复了 n 次，所以可以用循环来处理
//
// 1. 先设置一个变量 s 用来存阶乘，初始值为 1
// 2. 用循环把 1 到 n 的数字相乘保存到 s 中
// 3. 循环结束后，变量 s 里面存的是从 1 到 n 的阶乘, 返回变量 s（很重要，一定要 return s）

const fac = function(n) {

}